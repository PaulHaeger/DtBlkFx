# perl C++ preprocessor
#
# Use this for generating stuff using perl commands embedded in a .cpp file
#
# any line containing //P:<some code> is run as perl code
# all other lines are treated as text with any perl strings expanded
#
# e.g.
#   //P:for $IDX (1..5) {
#        void my_fn$IDX() { cout << $IDX << endl; }
#   //P:}
#
# generates:
#        void my_fn1() { cout << 1 << endl; }
#        void my_fn2() { cout << 2 << endl; }
#        void my_fn3() { cout << 3 << endl; }
#        void my_fn4() { cout << 4 << endl; }
#        void my_fn5() { cout << 5 << endl; }
#
# darrell.barrell

open(STDIN, $ARGV[0]) or die "Can't open $ARGV[0]\n";

$rm_tabs = 0;
$line = 0;
while(<STDIN>)
{
	$line++;
	chomp;
	next if /^#error/ && $line==1;
	
	# change perl code to normal
	if(/\/\/P:(.*)/) {
		$expr .= "$1\n";
		if(/\{/) { $rm_tabs++; }
		if(/\}/) { $rm_tabs--; }
		next
	}
	
	# remove a certain number of leading tabs corresponding to perl indenting
	for ($i=0; $i < $rm_tabs; $i++) {
		s/^\t//o;
	}

	# turn a bare line into a sprintf
	s/\\/\\\\/g;	# escape /
	s/"/\\"/g;		# escape "
	s/\$\$/\\\$/g;	# turn $$ into \$
	s/@/\\@/g;		# turn @ into \@
	s/%/\\%/g;		# turn % into \%
	# now generate a sprintf
	$expr .= "\$out_str .= \"$_\\n\";\n";
}


print STDERR $expr;
eval $expr;
print STDERR $@;
print "//DO NOT MODIFY! this file generated by $0 from $ARGV[0]\n";
print $out_str;
